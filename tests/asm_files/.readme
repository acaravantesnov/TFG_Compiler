# Ejemplo_1.s - Operaciones lógicas y shifts.   --> OK

1.          Guarda el valor 256 en el stack pointer (registro 2).
2 - 3.      Guarda 2 valores (-50 y 102) en los registros x6 y x7 (temporary registers).
4 - 11.     Opera y realiza operaciones lógicas sobre los registros temporales, y va
            guardando los resultados en registros guardados (x18 a x25).
12 - 19.    Usando el sp, guarda los resultados en la memoria de datos.

# Ejemplo_2.s - sb, lw y comparación slt.   --> OK

1.      Guarda el valor 256 en el stack pointer (registro 2).
2 - 3.  Guarda 2 valores (324 y -76) en los registros x6 y x7 (temporary registers).
4 - 5.  Guarda el byte menos significativo de ambos registros en memoria (sp y sp + 1).
6 - 7.  Carga los valores de ambas direcciones de memoria en los registros x6 y x7.
8.      Finalmente compara los 2 valores y guarda el resultado en el registro x18.

NOTA:   Los registros 5 y 6 se modifican posteriormente al entrar en bucle de excepciones y
        ser los que se usan para el manejo de ellas.

# Ejemplo_3.s - Bucle con iterador de 80 a 100. Cargar a GPIO.  --> OK

1 - 2.  Guarda los valores 80 y 100 en los registros x18 y x19 respectivamente.
3.      Con addi, va incrementando x18 de uno en uno.
4.      Despues se evalua la condicion de si x18 == x19. Si ha llegado el x18 al valor 100, se avanza a la siguiente instrucción.
5 - 7.  Se ponen a 1 los primeros 8 bits de TRI del GPIO (con el valor 255), y después se guarda en DatosOut del GPIO el valor del registro 18 (debería ser 100).
8 - 9.  El valor se vuelve a cargar en un registro (x8).

# Ejemplo_4.s - CSRs.   --> OK

2.      Carga el valor del registro x6 (1) al registro de control y estado 0.
        csr 0 tenía el valor 4 del mtvec, se cambia a 1 (x6), y se guarda 4 en x18.
3.      Pone a 1 el bit 3 del csr 0. => 101 (5)
4.      Pone a 1 el bit 5 del csr 0. => 10101 (21)
5 - 7.  Borra los bits 5, 3 y 1. => 101, 1, 0 (5, 1, 0)

NOTA:   Va guardando los valores en los registros x18 a x23.

# Ejemplo_5.s - Stores y Loads.  --> OK

1.  Guarda el valor 256 en el stack pointer (registro 2).
2.  Carga el valor -1000 en el registro temporal x18.
3.  Guarda el valor del registro x18 en el stack.
4.  Carga los los 32 bits del stack al registro x19. -1000
5.  Guarda los 16 LSB de x19 en el stack.
6.  Carga los 16 LSB del stack a x20. -1000
7.  Guarda los 8 LSB de x20 en el stack.
8.  Carga los 8 LSB del stack a x21. 24

# Ejemplo_6.s - Probando el Timer por primera vez.  --> OK

1.      Cargar en registro x18 dirección de memoria de timer.
2.      Cargar en registro x19 valor a cargar en ARR de Timer (valor al que quiero que llegue el timer, 98304 en decimal).
3.      Guardar valor de x19 en ARR.
4 - 5.  Con addi y sb, cargar bit Enable y En_Interrupt del registro de Control del Timer para que empiece a contar.
6.      Añadir un bucle al final para detectar el interrupt del Timer.

NOTA:   Usar por lo menos 2 ms para que el timer alcance ARR.

# FPGA_0.s --> NO

1. Cargar en x20 la dirección de memoria del registro 0 del GPIO.
2. Cargar en x21 el valor 10000000000000000.
3. Restar 1 a x21 para obtener 1111111111111111 (para los 16 LSB de TRI para los LED).
4. Guardar el valor 111111111111111 en TRI (registro 2 del GPIO).
5. Añadir el valor 16 a x24.
6. Cargar el valor del registro 1 del GPIO (datosIn) en el registro x22.
6. Cargar el valor de x22 en datosOut del GPIO.
7. Hacer bucle de instrucciones 5 y 6 saltando a la instrucción 5.
